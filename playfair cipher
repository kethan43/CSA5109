#include <stdio.h>
#include <string.h>
#include <ctype.h>

#define SIZE 5

char matrix[SIZE][SIZE];

// Function to remove duplicates and create key matrix
void generateKeyMatrix(char* key) {
    int dict[26] = {0};
    int i, j, k = 0;
    
    // Replace 'J' with 'I' and remove duplicates
    for (i = 0; key[i] != '\0'; i++) {
        if (key[i] == 'J') key[i] = 'I';
        if (!dict[key[i] - 'A']) {
            dict[key[i] - 'A'] = 1;
            key[k++] = key[i];
        }
    }

    // Fill remaining letters
    for (i = 0; i < 26; i++) {
        if (i == ('J' - 'A')) continue;
        if (!dict[i]) {
            key[k++] = i + 'A';
        }
    }
    key[k] = '\0';

    // Fill matrix
    k = 0;
    for (i = 0; i < SIZE; i++) {
        for (j = 0; j < SIZE; j++) {
            matrix[i][j] = key[k++];
        }
    }
}

void prepareText(char* input, char* output) {
    int i, j = 0;
    for (i = 0; input[i]; i++) {
        if (input[i] == ' ') continue;
        output[j++] = toupper(input[i] == 'J' ? 'I' : input[i]);
    }
    output[j] = '\0';

    // Insert 'X' between repeating letters in digraphs
    for (i = 0; i < j; i += 2) {
        if (output[i + 1] == '\0') {
            output[i + 1] = 'X';
            output[i + 2] = '\0';
        } else if (output[i] == output[i + 1]) {
            for (int k = j + 1; k > i + 1; k--) {
                output[k] = output[k - 1];
            }
            output[i + 1] = 'X';
            j++;
        }
    }
    if (j % 2 != 0) {
        output[j++] = 'X';
        output[j] = '\0';
    }
}

void findPosition(char letter, int* row, int* col) {
    for (int i = 0; i < SIZE; i++) {
        for (int j = 0; j < SIZE; j++) {
            if (matrix[i][j] == letter) {
                *row = i;
                *col = j;
                return;
            }
        }
    }
}

void encryptPair(char a, char b, char* out) {
    int r1, c1, r2, c2;
    findPosition(a, &r1, &c1);
    findPosition(b, &r2, &c2);

    if (r1 == r2) {
        out[0] = matrix[r1][(c1 + 1) % SIZE];
        out[1] = matrix[r2][(c2 + 1) % SIZE];
    } else if (c1 == c2) {
        out[0] = matrix[(r1 + 1) % SIZE][c1];
        out[1] = matrix[(r2 + 1) % SIZE][c2];
    } else {
        out[0] = matrix[r1][c2];
        out[1] = matrix[r2][c1];
    }
}

void encrypt(char* plaintext, char* ciphertext) {
    char prepared[100];
    prepareText(plaintext, prepared);
    int i, j = 0;

    for (i = 0; prepared[i]; i += 2) {
        encryptPair(prepared[i], prepared[i + 1], &ciphertext[j]);
        j += 2;
    }
    ciphertext[j] = '\0';
}

void printMatrix() {
    printf("Playfair Key Matrix:\n");
    for (int i = 0; i < SIZE; i++) {
        for (int j = 0; j < SIZE; j++) {
            printf("%c ", matrix[i][j]);
        }
        printf("\n");
    }
}

int main() {
    char key[100], plaintext[100], ciphertext[100];

    printf("Enter key: ");
    fgets(key, sizeof(key), stdin);
    key[strcspn(key, "\n")] = '\0';

    printf("Enter plaintext: ");
    fgets(plaintext, sizeof(plaintext), stdin);9o
    plaintext[strcspn(plaintext, "\n")] = '\0';

    for (int i = 0; key[i]; i++) key[i] = toupper(key[i]);
    generateKeyMatrix(key);

    printMatrix();

    encrypt(plaintext, ciphertext);
    printf("Encrypted Text: %s\n", ciphertext);

    return 0;
}
